var List = new GFGrammar(new GFAbstract("S",{Bar: new Type([], "PN"), Bat: new Type([], "PN"), Foo: new Type([], "PN"), mkSimpleConsList: new Type(["PN", "SimpleList"], "SimpleList"), mkSimpleList: new Type(["PN", "PN"], "SimpleList"), mkSimpleListNP: new Type(["SimpleList"], "SimpleListNP")}),{ListEng: new GFConcrete({},{1:[new Apply(6,[]), new Apply(7,[]), new Apply(8,[])], 3:[new Apply(9,[new PArg(23), new PArg(3)])], 4:[new Apply(9,[new PArg(23), new PArg(4)])], 5:[new Apply(9,[new PArg(23), new PArg(5)])], 6:[new Apply(9,[new PArg(23), new PArg(6)])], 7:[new Apply(9,[new PArg(0), new PArg(24)]), new Apply(10,[new PArg(0), new PArg(23)])], 8:[new Apply(9,[new PArg(1), new PArg(24)]), new Apply(10,[new PArg(1), new PArg(23)])], 9:[new Apply(9,[new PArg(2), new PArg(24)]), new Apply(10,[new PArg(2), new PArg(23)])], 10:[new Apply(9,[new PArg(0), new PArg(25)])], 11:[new Apply(9,[new PArg(1), new PArg(25)])], 12:[new Apply(9,[new PArg(2), new PArg(25)])], 14:[new Apply(11,[new PArg(26)])], 16:[new Apply(11,[new PArg(27)])], 20:[new Apply(11,[new PArg(28)])], 23:[new Coerce(0), new Coerce(1), new Coerce(2)], 24:[new Coerce(7), new Coerce(8), new Coerce(9)], 25:[new Coerce(10), new Coerce(11), new Coerce(12)], 26:[new Coerce(3), new Coerce(4)], 27:[new Coerce(5), new Coerce(6)], 28:[new Coerce(7), new Coerce(8), new Coerce(9), new Coerce(10), new Coerce(11), new Coerce(12)]},[new CncFun("'lindef PN'",[16, 16]), new CncFun("'lindef PN'",[0]), new CncFun("'lindef SimpleList'",[16, 16, 16, 16, 16, 16, 16, 16]), new CncFun("'lindef SimpleList'",[0]), new CncFun("'lindef SimpleListNP'",[16, 16, 16, 16]), new CncFun("'lindef SimpleListNP'",[0]), new CncFun("Bar",[17, 18]), new CncFun("Bat",[19, 20]), new CncFun("Foo",[21, 22]), new CncFun("mkSimpleConsList",[2, 7, 3, 4, 12, 13, 14, 15]), new CncFun("mkSimpleList",[0, 5, 0, 0, 10, 11, 10, 10]), new CncFun("mkSimpleListNP",[1, 6, 8, 9])],[[new SymCat(0, 0)],[new SymCat(0, 0), new SymKS("and"), new SymCat(0, 4)],[new SymCat(0, 0), new SymKS("&+"), new SymKS(","), new SymCat(1, 0)],[new SymCat(0, 0), new SymKS("&+"), new SymKS(","), new SymCat(1, 2)],[new SymCat(0, 0), new SymKS("&+"), new SymKS(","), new SymCat(1, 3)],[new SymCat(0, 1)],[new SymCat(0, 1), new SymKS("and"), new SymCat(0, 5)],[new SymCat(0, 1), new SymKS("&+"), new SymKS(","), new SymCat(1, 1)],[new SymCat(0, 2), new SymKS("and"), new SymCat(0, 6)],[new SymCat(0, 3), new SymKS("and"), new SymCat(0, 7)],[new SymCat(1, 0)],[new SymCat(1, 1)],[new SymCat(1, 4)],[new SymCat(1, 5)],[new SymCat(1, 6)],[new SymCat(1, 7)],[new SymLit(0, 0)],[new SymKS("Bar")],[new SymKS("Bar's")],[new SymKS("Bat")],[new SymKS("Bat's")],[new SymKS("Foo")],[new SymKS("Foo's")]],{Float:{s: -3, e: -3}, Int:{s: -2, e: -2}, PN:{s: 0, e: 2}, SimpleList:{s: 3, e: 12}, SimpleListNP:{s: 13, e: 22}, String:{s: -1, e: -1}}, 29)});
